{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as ImagePicker from 'expo-image-picker';\nimport colors from \"../config/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ImageInput(_ref) {\n  var imageUri = _ref.imageUri,\n      onChangeImage = _ref.onChangeImage;\n  useEffect(function () {\n    requestPermission();\n  }, []);\n\n  var requestPermission = function requestPermission() {\n    var granted;\n    return _regeneratorRuntime.async(function requestPermission$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            granted = _context.sent;\n\n            if (!granted) {\n              alert('You need to enable permission to access the library');\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handlePress = function handlePress() {\n    if (!imageUri) selectImage();else Alert.alert(\"Delete\", 'Are you sure you want to delete this image.', [{\n      text: 'Yes',\n      onPress: function onPress() {\n        return onChangeImage(null);\n      }\n    }, {\n      text: 'No'\n    }]);\n  };\n\n  var selectImage = function selectImage() {\n    var result;\n    return _regeneratorRuntime.async(function selectImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              quality: 0.5\n            }));\n\n          case 3:\n            result = _context2.sent;\n            if (!result.cancelled) onChangeImage(result.uri);\n            _context2.next = 9;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: handlePress,\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [!imageUri && _jsx(MaterialCommunityIcons, {\n        color: colors.medium,\n        name: \"camera\",\n        size: 40\n      }), imageUri && _jsx(Image, {\n        source: {\n          uri: imageUri\n        },\n        style: styles.image\n      })]\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.light,\n    borderRadius: 15,\n    height: 100,\n    width: 100,\n    overflow: 'hidden',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  image: {\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\nexport default ImageInput;","map":{"version":3,"sources":["/Users/girish/MOSH-ReactNative/Exercises10/app/components/ImageInput.js"],"names":["React","useEffect","MaterialCommunityIcons","ImagePicker","colors","ImageInput","imageUri","onChangeImage","requestPermission","requestMediaLibraryPermissionsAsync","granted","alert","handlePress","selectImage","Alert","text","onPress","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","quality","result","cancelled","uri","styles","container","medium","image","StyleSheet","create","backgroundColor","light","borderRadius","height","width","overflow","justifyContent","alignItems"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;AAEA,SAASC,sBAAT,QAAuC,oBAAvC;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,MAAP;;;;AACA,SAASC,UAAT,OAAiD;AAAA,MAA3BC,QAA2B,QAA3BA,QAA2B;AAAA,MAAjBC,aAAiB,QAAjBA,aAAiB;AAE7CN,EAAAA,SAAS,CAAC,YAAM;AACZO,IAAAA,iBAAiB;AACpB,GAFQ,EAEN,EAFM,CAAT;;AAGA,MAAMA,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACAL,WAAW,CAACM,mCAAZ,EADA;;AAAA;AAChBC,YAAAA,OADgB;;AAEtB,gBAAI,CAACA,OAAL,EAAc;AACVC,cAAAA,KAAK,CAAC,qDAAD,CAAL;AACH;;AAJqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAMA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,QAAI,CAACN,QAAL,EAAeO,WAAW,GAA1B,KACKC,KAAK,CAACH,KAAN,CAAY,QAAZ,EAAsB,6CAAtB,EAAqE,CACtE;AAAEI,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,OAAO,EAAE;AAAA,eAAMT,aAAa,CAAC,IAAD,CAAnB;AAAA;AAAxB,KADsE,EAEtE;AAAEQ,MAAAA,IAAI,EAAE;AAAR,KAFsE,CAArE;AAKR,GAPD;;AAQA,MAAMF,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAGSV,WAAW,CAACc,uBAAZ,CAAoC;AACrDC,cAAAA,UAAU,EAAEf,WAAW,CAACgB,gBAAZ,CAA6BC,MADY;AAErDC,cAAAA,OAAO,EAAE;AAF4C,aAApC,CAHT;;AAAA;AAGNC,YAAAA,MAHM;AAOZ,gBAAI,CAACA,MAAM,CAACC,SAAZ,EAAuBhB,aAAa,CAACe,MAAM,CAACE,GAAR,CAAb;AAPX;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAYA,SACI,KAAC,wBAAD;AAA0B,IAAA,OAAO,EAAEZ,WAAnC;AAAA,cAEI,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEa,MAAM,CAACC,SAApB;AAAA,iBACK,CAACpB,QAAD,IAAa,KAAC,sBAAD;AAAwB,QAAA,KAAK,EAAEF,MAAM,CAACuB,MAAtC;AAA8C,QAAA,IAAI,EAAC,QAAnD;AAA4D,QAAA,IAAI,EAAE;AAAlE,QADlB,EAEKrB,QAAQ,IAAI,KAAC,KAAD;AAAO,QAAA,MAAM,EAAE;AAAEkB,UAAAA,GAAG,EAAElB;AAAP,SAAf;AAAkC,QAAA,KAAK,EAAEmB,MAAM,CAACG;AAAhD,QAFjB;AAAA;AAFJ,IADJ;AASH;;AACD,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC7BJ,EAAAA,SAAS,EAAE;AACPK,IAAAA,eAAe,EAAE3B,MAAM,CAAC4B,KADjB;AAEPC,IAAAA,YAAY,EAAE,EAFP;AAGPC,IAAAA,MAAM,EAAE,GAHD;AAIPC,IAAAA,KAAK,EAAE,GAJA;AAKPC,IAAAA,QAAQ,EAAE,QALH;AAMPC,IAAAA,cAAc,EAAE,QANT;AAOPC,IAAAA,UAAU,EAAE;AAPL,GADkB;AAU7BV,EAAAA,KAAK,EAAE;AACHO,IAAAA,KAAK,EAAE,MADJ;AAEHD,IAAAA,MAAM,EAAE;AAFL;AAVsB,CAAlB,CAAf;AAeA,eAAe7B,UAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { View, StyleSheet, Image, TouchableWithoutFeedback, Alert } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\nimport * as ImagePicker from 'expo-image-picker'\nimport colors from '../config/colors';\nfunction ImageInput({ imageUri, onChangeImage }) {\n\n    useEffect(() => {\n        requestPermission();\n    }, [])\n    const requestPermission = async () => {\n        const granted = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (!granted) {\n            alert('You need to enable permission to access the library')\n        }\n    }\n    const handlePress = () => {\n        if (!imageUri) selectImage();\n        else Alert.alert(\"Delete\", 'Are you sure you want to delete this image.', [\n            { text: 'Yes', onPress: () => onChangeImage(null) },\n            { text: 'No', }\n\n        ])\n    }\n    const selectImage = async () => {\n\n        try {\n            const result = await ImagePicker.launchImageLibraryAsync({\n                mediaTypes: ImagePicker.MediaTypeOptions.Images,\n                quality: 0.5\n            });\n            if (!result.cancelled) onChangeImage(result.uri)\n        } catch (error) {\n\n        }\n    }\n    return (\n        <TouchableWithoutFeedback onPress={handlePress}>\n\n            <View style={styles.container}>\n                {!imageUri && <MaterialCommunityIcons color={colors.medium} name='camera' size={40} />}\n                {imageUri && <Image source={{ uri: imageUri }} style={styles.image} />}\n            </View>\n        </TouchableWithoutFeedback>\n    );\n}\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: colors.light,\n        borderRadius: 15,\n        height: 100,\n        width: 100,\n        overflow: 'hidden',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    image: {\n        width: \"100%\",\n        height: \"100%\"\n    }\n})\nexport default ImageInput;"]},"metadata":{},"sourceType":"module"}