{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Screen from \"../components/Screen\";\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Permissions from 'expo-permissions';\nimport * as Sharing from 'expo-sharing';\nimport AppButton from \"../components/AppButton\";\nimport ImageInput from \"../components/ImageInput\";\nimport ImageInputList from \"../components/ImageInputList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ImagePickerScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageUris = _useState2[0],\n      setImageUris = _useState2[1];\n\n  var handleAddImage = function handleAddImage(uri) {\n    setImageUris([].concat(_toConsumableArray(imageUris), [uri]));\n  };\n\n  var handleRemoveImage = function handleRemoveImage(uri) {\n    setImageUris(imageUris.filter(function (imageUri) {\n      return imageUri !== uri;\n    }));\n  };\n\n  return _jsx(Screen, {\n    children: _jsx(ImageInputList, {\n      imageUris: imageUris,\n      onAddImage: handleAddImage,\n      onRemoveImage: function onRemoveImage(uri) {\n        return handleRemoveImage(uri);\n      }\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 20\n  },\n  item: {\n    padding: 20,\n    marginVertical: 8,\n    marginHorizontal: 16\n  },\n  title: {\n    fontSize: 20\n  },\n  backgroundcolor: {\n    backgroundColor: '#746AB0',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default ImagePickerScreen;","map":{"version":3,"sources":["/Users/girish/MOSH-ReactNative/Exercises10/app/screens/ImagePickerScreen.js"],"names":["React","useEffect","useState","Screen","ImagePicker","Permissions","Sharing","AppButton","ImageInput","ImageInputList","ImagePickerScreen","props","imageUris","setImageUris","handleAddImage","uri","handleRemoveImage","filter","imageUri","styles","StyleSheet","create","container","padding","item","marginVertical","marginHorizontal","title","fontSize","backgroundcolor","backgroundColor","justifyContent","alignItems"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;;;AAEA,OAAOC,MAAP;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AACA,OAAOC,SAAP;AACA,OAAOC,UAAP;AACA,OAAOC,cAAP;;;AACA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,kBAAkCT,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOU,SAAP;AAAA,MAAkBC,YAAlB;;AACA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAS;AAC5BF,IAAAA,YAAY,8BAAKD,SAAL,IAAgBG,GAAhB,GAAZ;AACH,GAFD;;AAGA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACD,GAAD,EAAS;AAC/BF,IAAAA,YAAY,CAACD,SAAS,CAACK,MAAV,CAAiB,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,KAAKH,GAAjB;AAAA,KAAzB,CAAD,CAAZ;AACH,GAFD;;AAGA,SACI,KAAC,MAAD;AAAA,cACI,KAAC,cAAD;AACI,MAAA,SAAS,EAAEH,SADf;AAEI,MAAA,UAAU,EAAEE,cAFhB;AAGI,MAAA,aAAa,EAAE,uBAAAC,GAAG;AAAA,eAAIC,iBAAiB,CAACD,GAAD,CAArB;AAAA;AAHtB;AADJ,IADJ;AASH;;AACD,IAAMI,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAE7BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,OAAO,EAAE;AADF,GAFkB;AAK7BC,EAAAA,IAAI,EAAE;AACFD,IAAAA,OAAO,EAAE,EADP;AAEFE,IAAAA,cAAc,EAAE,CAFd;AAGFC,IAAAA,gBAAgB,EAAE;AAHhB,GALuB;AAU7BC,EAAAA,KAAK,EAAE;AACHC,IAAAA,QAAQ,EAAE;AADP,GAVsB;AAa7BC,EAAAA,eAAe,EAAE;AACbC,IAAAA,eAAe,EAAE,SADJ;AAEbC,IAAAA,cAAc,EAAE,QAFH;AAGbC,IAAAA,UAAU,EAAE;AAHC;AAbY,CAAlB,CAAf;AAmBA,eAAetB,iBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet, Image, ActivityIndicator, Button, TouchableOpacity, FlatList } from 'react-native';\nimport Screen from '../components/Screen';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Permissions from 'expo-permissions';\nimport * as Sharing from 'expo-sharing';\nimport AppButton from '../components/AppButton';\nimport ImageInput from '../components/ImageInput';\nimport ImageInputList from '../components/ImageInputList';\nfunction ImagePickerScreen(props) {\n    const [imageUris, setImageUris] = useState([]);\n    const handleAddImage = (uri) => {\n        setImageUris([...imageUris, uri])\n    }\n    const handleRemoveImage = (uri) => {\n        setImageUris(imageUris.filter(imageUri => imageUri !== uri))\n    }\n    return (\n        <Screen>\n            <ImageInputList\n                imageUris={imageUris}\n                onAddImage={handleAddImage}\n                onRemoveImage={uri => handleRemoveImage(uri)}\n            />\n        </Screen >\n    );\n}\nconst styles = StyleSheet.create({\n    //this is an image sharing example \n    container: {\n        padding: 20,\n    },\n    item: {\n        padding: 20,\n        marginVertical: 8,\n        marginHorizontal: 16,\n    },\n    title: {\n        fontSize: 20,\n    },\n    backgroundcolor: {\n        backgroundColor: '#746AB0',\n        justifyContent: 'center',\n        alignItems: 'center'\n    }\n})\nexport default ImagePickerScreen;\n//<ImageInput imageUri={imageUri} onChangeImage={(uri) => setImageUri(uri)} />\n// <ActivityIndicator /><ImageInput imageUri={imageUri} onChangeImage={(uri) => setImageUri(uri)} />\n//<ActivityIndicator size=\"small\" color=\"#0000ff\" />'\n// backgroundColor: '#746AB0'\n//  <FlatList\n// data={DATA}\n// renderItem={renderItem}\n// keyExtractor={item => item.id}\n//  <Text>This is image Picker</Text>\n//                 <AppButton title='select Image' onPress={selectImage} />\n//           hkhjkhkjkjhi      <Image source={{ uri: imageUri }} style={{ width: 200, height: 200 }} />\n//     /> \n/*\n<View style={[styles.container, styles.backgroundcolor]}>\n                <View style={{ height: 10, width: \"100%\" }}></View>\n               \n                <Text style={{ padding: 20 }}>This is image from library</Text>\n                <AppButton title=\"SHARE IMAGE\" onPress={handlePress} />\n                <Text style={{ paddingBottom: 10 }}>This is sharing image from default share openshareDialog </Text>\n                <Image source={{ uri: \"https://i.imgur.com/TkIrScD.png\" }} style={{ width: 305, height: 159 }} />\n                <Text style={{ color: '#888', fontSize: 18 }}>\n                    To share a photo from your phone with a friend, just press the button abo!\n                </Text>\n\n\n                //   const result  = await   Permissions.askAsync(Permissions.MEDIA_LIBRARY, Permissions.LOCATION_FOREGROUND);\n        //   if (result.granted){\n        //       // if both permission accepted then return true other vise return false\n        //   }\n         // useEffect(() => {\n    //     requestPermission()\n    // }, [])\n    SHARE FUNCTION\n    const [imageUri, setImageUri] = useState();\n    const handlePress = () => {\n        openShareDialogAsync();\n    }\n    const openShareDialogAsync = async () => {\n        console.log('openshareDialog');\n        if (!(await Sharing.isAvailableAsync())) {\n            alert(`Uh oh, sharing isn't available on your platform`);\n            return;\n        }\n        if (!imageUri) {\n            alert(`Uh oh, sharing image isn't available on your image list`);\n        }\n        console.log(imageUri);\n        await Sharing.shareAsync(imageUri);\n    } const selectImage = async () => {\n        try {\n            const result = await ImagePicker.launchImageLibraryAsync();\n            if (!result.cancelled) {\n                setImageUri(result.uri)\n            }\n        } catch (error) {\n            console.log('Error reading an image ', error)\n        }\n    }\n            </View>*/\n"]},"metadata":{},"sourceType":"module"}