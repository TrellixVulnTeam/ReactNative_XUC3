{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport colors from \"../config/colors\";\nimport defaultStyle from \"../config/styles\";\nimport AppText from \"./AppText\";\nimport Screen from \"./Screen\";\nimport PickerItem from \"./PickerItem\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction AppPicker(_ref) {\n  var icon = _ref.icon,\n      items = _ref.items,\n      _ref$numberOfColumns = _ref.numberOfColumns,\n      numberOfColumns = _ref$numberOfColumns === void 0 ? 1 : _ref$numberOfColumns,\n      onSelectItem = _ref.onSelectItem,\n      _ref$PickerItemCompon = _ref.PickerItemComponent,\n      PickerItemComponent = _ref$PickerItemCompon === void 0 ? PickerItem : _ref$PickerItemCompon,\n      placeholder = _ref.placeholder,\n      selectedItem = _ref.selectedItem;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(TouchableWithoutFeedback, {\n      onPress: function onPress() {\n        return setModalVisible(true);\n      },\n      children: _jsxs(View, {\n        style: styles.container,\n        children: [icon && _jsx(MaterialCommunityIcons, {\n          name: icon,\n          size: 25,\n          color: colors.medium,\n          style: styles.icon\n        }), selectedItem ? _jsx(AppText, {\n          style: styles.text,\n          children: selectedItem.label\n        }) : _jsx(AppText, {\n          style: styles.placeholder,\n          children: placeholder\n        }), _jsx(MaterialCommunityIcons, {\n          name: \"chevron-down\",\n          size: 25,\n          color: colors.medium\n        })]\n      })\n    }), _jsx(Modal, {\n      visible: modalVisible,\n      animationType: \"slide\",\n      children: _jsxs(Screen, {\n        children: [_jsx(Button, {\n          title: \"Close\",\n          onPress: function onPress() {\n            return setModalVisible(false);\n          }\n        }), _jsx(FlatList, {\n          data: items,\n          keyExtractor: function keyExtractor(item) {\n            return item.value.toString();\n          },\n          numColumns: numberOfColumns,\n          renderItem: function renderItem(_ref2) {\n            var item = _ref2.item;\n            return _jsx(PickerItemComponent, {\n              item: item,\n              label: item.label,\n              onPress: function onPress() {\n                setModalVisible(false);\n                onSelectItem(item);\n              }\n            });\n          }\n        })]\n      })\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.light,\n    borderRadius: 25,\n    flexDirection: 'row',\n    width: '100%',\n    padding: 15,\n    marginVertical: 10\n  },\n  icon: {\n    marginRight: 10\n  },\n  text: {\n    flex: 1\n  },\n  placeholder: {\n    color: colors.medium,\n    flex: 1\n  }\n});\nexport default AppPicker;","map":{"version":3,"sources":["/Users/girish/MOSH-ReactNative/Exercises10/app/components/AppPicker.js"],"names":["React","useState","MaterialCommunityIcons","colors","defaultStyle","AppText","Screen","PickerItem","AppPicker","icon","items","numberOfColumns","onSelectItem","PickerItemComponent","placeholder","selectedItem","modalVisible","setModalVisible","styles","container","medium","text","label","item","value","toString","StyleSheet","create","backgroundColor","light","borderRadius","flexDirection","width","padding","marginVertical","marginRight","flex","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { TextInput, View, StyleSheet, Platform, TouchableWithoutFeedback, Modal, Button, FlatList, Text } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport colors from '../config/colors';\nimport defaultStyle from '../config/styles';\nimport AppText from './AppText';\nimport Screen from './Screen';\nimport PickerItem from './PickerItem';\n\nfunction AppPicker(\n    {\n        icon,\n        items,\n        numberOfColumns = 1,\n        onSelectItem,\n        PickerItemComponent = PickerItem,\n        placeholder,\n        selectedItem\n    }) {\n    const [modalVisible, setModalVisible] = useState(false);\n    return (\n        <>\n            <TouchableWithoutFeedback onPress={() => setModalVisible(true)}>\n                <View style={styles.container}>\n                    {icon && <MaterialCommunityIcons\n                        name={icon}\n                        size={25}\n                        color={colors.medium}\n                        style={styles.icon} />}\n                    {selectedItem ? (\n                        <AppText style={styles.text}>{selectedItem.label}</AppText>\n                    ) : (\n                        <AppText style={styles.placeholder}>{placeholder}</AppText>\n                    )}\n\n                    <MaterialCommunityIcons\n                        name=\"chevron-down\"\n                        size={25}\n                        color={colors.medium}\n                    />\n                </View>\n            </TouchableWithoutFeedback>\n            <Modal visible={modalVisible} animationType='slide'>\n                <Screen>\n                    <Button title='Close' onPress={() => setModalVisible(false)} />\n                    <FlatList\n                        data={items}\n                        keyExtractor={item => item.value.toString()}\n                        numColumns={numberOfColumns}\n                        renderItem={({ item }) =>\n                            <PickerItemComponent\n                                item={item}\n                                label={item.label}\n                                onPress={() => {\n                                    setModalVisible(false);\n                                    onSelectItem(item);\n                                }} />}\n                    />\n                </Screen>\n            </Modal>\n        </>\n\n    );\n}\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: colors.light,\n        borderRadius: 25,\n        flexDirection: 'row',\n        width: '100%',\n        padding: 15,\n        marginVertical: 10\n    },\n    icon: {\n        marginRight: 10,\n    },\n    text: {\n        flex: 1\n    },\n    placeholder: {\n        color: colors.medium,\n        flex: 1\n    }\n})\nexport default AppPicker;\n//  <AppText style={styles.text}>{selectedItem ? selectedItem.label : placeholder}</AppText>"]},"metadata":{},"sourceType":"module"}